pipeline {
    agent any
    
    environment {
    SONAR_LOGIN = credentials('sonarcloud-token')  // 'sonarcloud-token' es el ID del token almacenado en Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/gastonbarbaccia/laravel_blog_v2.git'
            }
        }

        stage('SonarCloud Analysis') {
            steps {
                echo 'Realizando análisis de SonarCloud...'
                // Ejecutar el SonarQube Scanner con el archivo sonar-project.properties
                withSonarQubeEnv('SonarCloud') {  // Nombre configurado en Jenkins
                    sh 'sonar-scanner -Dsonar.login=${SONAR_LOGIN}'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo 'Verificando Quality Gate...'
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build and Deploy') {
            steps {
                echo 'Compilando y desplegando...'
                // Aquí se continuarían las siguientes etapas del pipeline
                sh 'mvn clean package'
            }pipeline {
    agent any
        }
    }

    post {
        success {
            echo 'Pipeline completado exitosamente con análisis de SonarCloud!'
        }
        failure {
            echo 'El pipeline falló.'
        }
    }
}

